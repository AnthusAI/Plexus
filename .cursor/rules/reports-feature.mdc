---
description:
globs:
alwaysApply: false
---
# Plexus Reports Feature

The Reports feature in Plexus provides a flexible and extensible system for generating, storing, and viewing various types of reports and analyses.

## Core Concepts

The reporting system is built around four core concepts:

1. **ReportConfiguration**: Defines the structure and content of reports using Markdown and Jinja2 templating
2. **Report**: Represents a specific instance of a generated report
3. **ReportBlock**: Both a database model and Python class for generating specific sections
4. **Task/TaskStage**: Standard mechanism for tracking report generation progress

## Key Files & Directories

### Backend (Python)
- `plexus/reports/blocks/base.py`: Base class for report blocks
- `plexus/reports/blocks/score_info.py`: Example block implementation
- `plexus/reports/service.py`: Core report generation logic
- `plexus/cli/commands/report.py`: CLI commands for report management

### Frontend (Next.js/React)
- `dashboard/app/reports/page.tsx`: Main reports dashboard
- `dashboard/app/lab/reports/edit/page.tsx`: Report configuration management
- `dashboard/components/reports/`: Report-related components
- `dashboard/components/blocks/`: Block-specific renderers

## Data Models

### ReportConfiguration
- Stored in DynamoDB
- Contains name, description, accountId, configuration (YAML/JSON)
- Links to Account

### Report
- Stored in DynamoDB
- Links to ReportConfiguration and Task
- Contains output (rendered Markdown)
- Links to ReportBlocks

### ReportBlock
- Stored in DynamoDB
- Links to Report
- Contains output (JSON) and optional logs
- Has position and optional name

## Task Progress Tracking

Reports use the standard Task/TaskStage system for progress tracking:
- Only stages with `total_items` show progress bars
- Setup and Finalizing stages typically don't show progress
- Main Processing stages show progress bars

## CLI Commands

Key commands for report management:
- `report config list`: List configurations
- `report config show <id_or_name>`: Show config details
- `report config create`: Create new config
- `report config delete`: Delete config
- `report run`: Generate report
- `report list`: List reports
- `report show`: Show report details
- `report last`: Show most recent report

## Block System

### Python Blocks
- Inherit from `BaseReportBlock`
- Implement `generate(config, params)` method
- Return JSON-serializable data
- Can access Plexus data via API client

### React Components
- Registered in `BlockRegistry`
- Rendered by `BlockRenderer`
- Receive block output as props
- Use Shadcn UI components for styling

## Authentication & Authorization

- Auth handled by AWS Amplify/Cognito
- Routes checked against `publicPaths` in `client-layout.tsx`
- Protected routes redirect to landing
- Data operations flow through `amplify-client.ts`

## Example Report Configuration

```markdown
# Report Header

This is a sample configuration.

```block name="Score Info Block"
class: ScoreInfo
scorecard: example_scorecard
score: ExampleScore
```
```

## Current Development Focus

The current focus is on:
1. Feedback Analysis integration - Refactoring client-specific analysis into the Plexus platform
2. Implementing specialized block components for various analysis types
3. Frontend block rendering optimizations
