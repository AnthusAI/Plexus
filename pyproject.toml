[build-system]
requires = ["setuptools>=64.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "plexus"
dynamic = ["version"]
description = "A Python module for configuring and managing data scoring"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [
    { name = "Anthus AI Solutions" }
]
dependencies = [
    "pytest==8.2.2",
    "flake8==7.1.1",
    "pytest-cov==5.0.0",
    "pyfakefs>=5.0.0",
    "python-dotenv>=1.1.0",
    "pytest-watch==4.2.0",
    "pytest-asyncio==0.23.5",
    "pandas==2.1.4",
    "openai>=1.35.10",
    "tenacity==8.2.3",
    "nltk==3.9.1",
    "pybind11",
    "tiktoken==0.7.0",
    "transformers",
    "seaborn",
    "pydot==2.0.0",
    "pydotplus==2.0.2",
    "graphviz==0.20.3",
    "boto3",
    "graphviz",
    "ruamel.yaml>=0.18.10",
    "mistune==3.0.2",
    "pyyaml",
    "sphinx",
    "sphinx-rtd-theme",
    "mlflow",
    "scikit-learn==1.5.1",
    "tables",
    "xgboost==2.0.3",
    "imbalanced-learn==0.12.3",
    "imblearn==0.0",
    "shap==0.45.1",
    "contractions==0.1.73",
    "langchain>=0.3.25",
    "langchain-core>=0.3.70",
    "langchain-community>=0.3.24",
    "langgraph==0.2.60",
    "langchain-aws>=0.2.23",
    "langchain-openai>=0.1.14",
    "langchain-ollama>=0.3.6",
    "langchain-google-vertexai>=1.0.6",
    "langchain-anthropic>=0.3.10",
    "langgraph-checkpoint-postgres==2.0.9",
    "openpyxl==3.1.5",
    "rapidfuzz==3.9.4",
    "datasets",
    "gensim",
    "watchtower",
    "pyairtable",
    "azure-identity>=1.15.0",
    "rich>=13.9.4",
    "gql[requests]>=3.0.0",
    "openai-cost-calculator @ git+https://github.com/AnthusAI/openai_cost_calculator.git@main",
    "invoke>=2.2.0",
    "celery>=5.4.0",
    "pycurl>=7.45.4",
    "SQLAlchemy[asyncio]==1.4.15",
    "fastmcp>=2.3.5",
    "ollama>=0.1.6",
    "bertopic>=0.16.2",
    "kaleido>=0.2.1"
]

[project.scripts]
plexus = "plexus.cli.shared.CommandLineInterface:main"
plexus-dashboard = "plexus.dashboard.cli:cli"

[tool.setuptools]
packages = { find = { include = ["plexus*"] } }
package-data = { plexus = ["templates/*", "__main__.py", "py.typed", "scores/*.py"] }

[tool.setuptools.dynamic]
version = {attr = "plexus._version.__version__"}

[tool.pytest.ini_options]
filterwarnings = [
    "ignore:pkg_resources is deprecated as an API:DeprecationWarning",
    "ignore:Deprecated call to `pkg_resources.declare_namespace:DeprecationWarning"
]
markers = [
    "integration: marks tests that make actual external LLM API calls"
]
addopts = "-m 'not integration'"

[tool.coverage.run]
omit = ["*_test.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
    "def main"
]

[tool.semantic_release]
version_variable = ["plexus/_version.py:__version__"]
version_toml = []
version_pattern = []
commit_message = "chore: release {version}"
major_on_zero = false
tag_format = "v{version}"
changelog_file = "CHANGELOG.md"
build_command = "echo Building... [dummy command]"
starting_version = "0.0.0"
version_source = "tag"

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.branches.staging]
match = "staging"
prerelease = true
prerelease_token = "rc"

[tool.semantic_release.branches.develop]
match = "develop"
prerelease = true
prerelease_token = "alpha"

[tool.pydantic-settings]
protected_namespaces = []
