/*
Data Operations Refactoring Plan
=================================

Overview:
---------
Currently, our codebase has significant duplication in functions that interact with the Amplify client. In particular:

- Both dashboard/utils/data-operations.ts and dashboard/utils/amplify-helpers.ts contain similar implementations for model queries (e.g., listFromModel, getFromModel), data transformations (e.g., convertToAmplifyTask, processTask, transformAmplifyTask, transformEvaluation), and subscription handling (e.g., observeRecentTasks, observeRecentEvaluations, observeScoreResults).

Goals:
------
1. Consolidate the duplicated logic into well-organized, modular files.
2. Create dedicated modules for:
   - API interactions (CRUD operations): This module (e.g., "amplify-api" or "client") will house functions like getClient, listFromModel, getFromModel, createTask, updateTask.
   - Data Transformation: This module (e.g., "transformers" or "data-transformers") will include functions to transform raw API responses into processed entities (e.g., transformAmplifyTask, processTask, transformEvaluation).
   - Subscriptions: This module (e.g., "subscriptions") will handle all reactive functionality such as observeRecentTasks, observeRecentEvaluations, observeScoreResults.
3. Centralize common type definitions (e.g., LazyLoader, GraphQLResponse, AmplifyListResult) in a types file (like dashboard/utils/types.ts), and expand as needed.
4. Add test coverage for each new module ‚Äì unit tests for API interactions, transformers, and subscription logic. Integration tests should also be implemented to verify overall functionality.

Key Process:
------------
A critical requirement throughout this refactoring is to maintain zero type-check errors. To ensure this, we will:
- Re-run `npm run typecheck` in the dashboard/ folder after every single, small change.
- Use baby steps to incrementally refactor functionality while verifying type-check validity at each step.

Itemized Checklist:
---------------------
1. Analysis & Planning ‚úì
   - Review current implementations in data-operations.ts and amplify-helpers.ts ‚úì
   - Identify duplications and similarities between the functions (model queries, data transformations, subscriptions) ‚úì

2. Module Creation & Consolidation
   a. Create a new module for API Interactions: ‚úì
      - Extract and consolidate functions: listFromModel, getFromModel, createTask, updateTask, etc. ‚úì
      - Verify that all consumers of these functions are updated to use the new module. ‚úì
      - Re-run `npm run typecheck` after changes. ‚úì

   b. Create a new module for Data Transformers: ‚úì
      - Extract conversion and transformation functions: convertToAmplifyTask, processTask, transformAmplifyTask, transformEvaluation. ‚úì
      - Ensure consistency in data structure conversion for tasks and evaluations. ‚úì
      - Run type check after updates. ‚úì

   c. Create a new module for Subscription Handling: üîÑ
      - Create subscriptions.ts module ‚úì
      - Move subscription functions (observeRecentTasks, observeRecentEvaluations, observeScoreResults) ‚úì
      - Add SubscriptionHandler type to types.ts ‚úì
      - Verify type checking (in progress) üîÑ
      - Remove duplicate subscription code from original files (pending)
      - Re-run type checks after changes.

   d. Organize/Review Types:
      - Consolidate common types (LazyLoader, GraphQLResponse, AmplifyListResult, etc.) into a unified types module.
      - Remove duplicate or redundant type declarations.
      - Verify via type check.

3. Refactoring & Integration
   - Update codebase consumers to refer to the new modules instead of the old ones.
   - Remove deprecated/duplicate code from data-operations.ts and amplify-helpers.ts.
   - Ensure that the new structure is well-documented within the code.

4. Testing
   - Write unit tests for the new API interactions module.
   - Write unit tests for data transformation functions.
   - Write unit tests for subscription logic.
   - Write integration tests if necessary.
   - Re-run all tests and `npm run typecheck` after each change.

5. Continuous Verification ‚úì (Ongoing)
   - After every small change or refactoring step, run `npm run typecheck` in the dashboard/ folder to ensure that no new type errors are introduced. ‚úì
   - Incrementally verify functionality with tests. ‚úì

6. Final Cleanup
   - Document the new module structure in the project documentation.
   - Ensure that all old redundant code is removed or archived for reference.

Current Status:
--------------
‚úì Completed:
- Created amplify-api.ts module with consolidated API interaction functions
- Created transformers.ts module with data transformation functions
- Successfully moved and exported convertToAmplifyTask and processTask
- Created subscriptions.ts module with all subscription functions
- Added SubscriptionHandler type to types.ts

üîÑ In Progress:
- Verifying type checking for subscription module
- Next: Remove duplicate subscription code from original files

‚è≥ Pending:
- Type organization
- Integration updates
- Testing
- Final cleanup

Note: The plan emphasizes continuous type checking and small, incremental changes to guarantee stability and catch type errors early.
*/ 