# YAML DSL Linter Test Cases
# This file contains test cases for validating the YAML linter implementation
# Each test case includes input YAML, expected results, and metadata

# Score Configuration Test Cases
score_tests:
  - name: "Valid score configuration"
    description: "A properly formatted score configuration should pass validation"
    context: "score"
    input: |
      name: "Sentiment Analysis"
      key: "sentiment_analysis"
      externalId: "sent-001"
      description: "Analyzes sentiment in customer feedback"
      type: "categorical"
      version: "1.0.0"
      tags:
        - "nlp"
        - "sentiment"
      config:
        threshold: 0.7
        categories: ["positive", "negative", "neutral"]
    expected:
      is_valid: true
      error_count: 0
      warning_count: 0
    tags: ["valid", "complete"]

  - name: "Missing required fields"
    description: "Score missing required name and key fields"
    context: "score"
    input: |
      description: "A score without required fields"
      type: "binary"
    expected:
      is_valid: false
      error_count: 2
      warning_count: 0
      messages:
        - code: "REQUIRED_FIELD_NAME"
          level: "error"
        - code: "REQUIRED_FIELD_KEY"
          level: "error"
    tags: ["invalid", "required-fields"]

  - name: "Invalid key format"
    description: "Score key with invalid characters (uppercase, spaces)"
    context: "score"
    input: |
      name: "Bad Key Score"
      key: "BAD KEY WITH SPACES!"
      description: "Score with invalid key format"
    expected:
      is_valid: false
      error_count: 1
      warning_count: 0
      messages:
        - code: "SCORE_KEY_FORMAT"
          level: "error"
    tags: ["invalid", "key-format"]

  - name: "External ID consistency warning"
    description: "Score with both camelCase and snake_case external IDs"
    context: "score"
    input: |
      name: "Inconsistent External ID"
      key: "inconsistent_external_id"
      externalId: "camel-case-id"
      external_id: "snake_case_id"
      description: "Score with inconsistent external ID format"
    expected:
      is_valid: true
      error_count: 0
      warning_count: 1
      messages:
        - code: "SCORE_EXTERNAL_ID_CONSISTENCY"
          level: "warning"
    tags: ["valid", "warnings", "external-id"]

  - name: "Invalid score type"
    description: "Score with unsupported type value"
    context: "score"
    input: |
      name: "Invalid Type Score"
      key: "invalid_type"
      type: "unsupported_type"
      description: "Score with invalid type"
    expected:
      is_valid: false
      error_count: 1
      warning_count: 0
      messages:
        - code: "ALLOWED_VALUES_TYPE"
          level: "error"
    tags: ["invalid", "type-validation"]

  - name: "Empty document"
    description: "Empty YAML document"
    context: "score"
    input: ""
    expected:
      is_valid: true
      error_count: 0
      warning_count: 1
      messages:
        - code: "YAML_EMPTY_DOCUMENT"
          level: "warning"
    tags: ["valid", "warnings", "empty"]

  - name: "YAML syntax error"
    description: "Invalid YAML syntax with unclosed quotes"
    context: "score"
    input: |
      name: "Unclosed quote
      key: "syntax_error"
    expected:
      is_valid: false
      error_count: 1
      warning_count: 0
      messages:
        - code: "YAML_SYNTAX_ERROR"
          level: "error"
    tags: ["invalid", "syntax"]

# Data Source Configuration Test Cases
data_source_tests:
  - name: "Valid file data source"
    description: "A properly formatted file data source configuration"
    context: "data-source"
    input: |
      type: "file"
      name: "Customer Feedback CSV"
      format: "csv"
      schema:
        columns:
          - name: "customer_id"
            type: "string"
          - name: "feedback"
            type: "text"
          - name: "rating"
            type: "number"
      refresh:
        enabled: true
        interval: "daily"
    expected:
      is_valid: true
      error_count: 0
      warning_count: 0
    tags: ["valid", "file"]

  - name: "Valid database data source"
    description: "A properly formatted database data source configuration"
    context: "data-source"
    input: |
      type: "database"
      name: "Customer Database"
      connection:
        host: "db.example.com"
        port: 5432
        database: "customers"
        username: "readonly"
        ssl: true
      query: "SELECT * FROM feedback WHERE created_at > NOW() - INTERVAL '30 days'"
      format: "sql"
    expected:
      is_valid: true
      error_count: 0
      warning_count: 0
    tags: ["valid", "database"]

  - name: "Missing required type"
    description: "Data source missing required type field"
    context: "data-source"
    input: |
      name: "Incomplete Data Source"
      format: "csv"
    expected:
      is_valid: false
      error_count: 1
      warning_count: 0
      messages:
        - code: "REQUIRED_FIELD_TYPE"
          level: "error"
    tags: ["invalid", "required-fields"]

  - name: "Invalid data source type"
    description: "Data source with unsupported type"
    context: "data-source"
    input: |
      type: "unsupported"
      name: "Invalid Type Source"
    expected:
      is_valid: false
      error_count: 1
      warning_count: 0
      messages:
        - code: "ALLOWED_VALUES_TYPE"
          level: "error"
    tags: ["invalid", "type-validation"]

  - name: "Database without connection warning"
    description: "Database data source without connection information"
    context: "data-source"
    input: |
      type: "database"
      name: "Database Without Connection"
      format: "sql"
    expected:
      is_valid: true
      error_count: 0
      warning_count: 1
      messages:
        - code: "DATA_SOURCE_DB_CONNECTION"
          level: "warning"
    tags: ["valid", "warnings", "database"]

  - name: "API without query recommendation"
    description: "API data source without query field"
    context: "data-source"
    input: |
      type: "api"
      name: "API Without Query"
      format: "json"
    expected:
      is_valid: true
      error_count: 0
      warning_count: 0
      info_count: 1
      messages:
        - code: "DATA_SOURCE_QUERY_RECOMMENDATION"
          level: "info"
    tags: ["valid", "info", "api"]

  - name: "Invalid format type"
    description: "Data source with unsupported format"
    context: "data-source"
    input: |
      type: "file"
      name: "Invalid Format Source"
      format: "unsupported_format"
    expected:
      is_valid: false
      error_count: 1
      warning_count: 0
      messages:
        - code: "ALLOWED_VALUES_FORMAT"
          level: "error"
    tags: ["invalid", "format-validation"]

# Complex Integration Test Cases
integration_tests:
  - name: "Complex score with all fields"
    description: "Comprehensive score configuration with all optional fields"
    context: "score"
    input: |
      name: "Advanced Sentiment Classifier"
      key: "advanced_sentiment"
      externalId: "adv-sent-v2"
      description: "Multi-model sentiment analysis with confidence scoring"
      type: "numeric"
      version: "2.1.0"
      tags:
        - "nlp"
        - "sentiment"
        - "advanced"
        - "confidence"
      config:
        models:
          - name: "transformer"
            weight: 0.6
            params:
              max_length: 512
              temperature: 0.7
          - name: "traditional_ml"
            weight: 0.4
            params:
              features: ["ngrams", "pos", "sentiment_lexicon"]
        ensemble:
          method: "weighted_average"
          confidence_threshold: 0.8
        output:
          range: [0, 1]
          precision: 3
    expected:
      is_valid: true
      error_count: 0
      warning_count: 0
    tags: ["valid", "complex", "comprehensive"]

  - name: "Complex data source with all features"
    description: "Comprehensive data source configuration with all features"
    context: "data-source"
    input: |
      type: "database"
      name: "Customer 360 Data Warehouse"
      connection:
        host: "warehouse.company.com"
        port: 5432
        database: "customer_360"
        username: "analytics_user"
        password: "${DB_PASSWORD}"
        ssl: true
        pool_size: 10
        timeout: 30
      query: |
        SELECT 
          c.customer_id,
          c.first_name,
          c.last_name,
          c.email,
          i.purchase_amount,
          i.purchase_date,
          f.feedback_text,
          f.rating,
          f.created_at as feedback_date
        FROM customers c
        LEFT JOIN interactions i ON c.customer_id = i.customer_id
        LEFT JOIN feedback f ON c.customer_id = f.customer_id
        WHERE f.created_at >= NOW() - INTERVAL '90 days'
        ORDER BY f.created_at DESC
      format: "sql"
      schema:
        primary_key: "customer_id"
        columns:
          - name: "customer_id"
            type: "string"
            nullable: false
          - name: "feedback_text"
            type: "text"
            nullable: true
          - name: "rating"
            type: "number"
            min: 1
            max: 5
      refresh:
        enabled: true
        interval: "hourly"
        schedule: "0 * * * *"
        retry_policy:
          max_retries: 3
          backoff: "exponential"
    expected:
      is_valid: true
      error_count: 0
      warning_count: 0
    tags: ["valid", "complex", "comprehensive", "database"]